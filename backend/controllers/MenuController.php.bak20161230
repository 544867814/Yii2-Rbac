<?php

namespace backend\controllers;

use Yii;
use backend\models\Menu;
use yii\data\ActiveDataProvider;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use backend\models\AuthItem;
use yii\data\Pagination;

/**
 * 菜单控制器
 */
class MenuController extends CommonController
{

    /**
     * 菜单列表
     */
    public function actionIndex()
    {
        $menu = new Menu();
        $menu = $menu->getMenuList();
        return $this->render('index', [
            'menu' => $menu
        ]);
    }


    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * 创建菜单
     */
    public function actionCreate()
    {
        $auth = Yii::$app->authManager;
        $model = new Menu();
        $menu = $model->getCreateMenuList();
        $menuArr = array('0'=>"顶级菜单");

        foreach($menu as $vo){
            $menuArr[$vo['id']] = $vo['name'];
            if(!empty($vo['_child'])){
                foreach($vo['_child'] as $v){
                    $menuArr[$v['id']] = "|--".$v['name'];
                    if(!empty($v['_child'])){
                        foreach($v['_child'] as $v3){
                            $menuArr[$v3['id']] = "|----".$v3['name'];
                        }
                    }
                }
            }
        }

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            //增加菜单同时增加权限
            $post = Yii::$app->request->post();
            $name = $post['Menu']['route'];

            if(!empty($name)){
                $role = $auth->getPermission($name);    //是否已存在改权限
                if($role == NULL){
                    $auth = Yii::$app->authManager;
                    $createPost = $auth->createPermission($name);
                    $createPost->description = '创建了[' . $name. ']权限';
                    $auth->add($createPost);

                    //将权限赋给角色
                    $parent = $auth->createRole('超级管理员');                //创建角色对象
                    $child = $auth->createPermission($name);                 //创建权限对象
                    $auth->addChild($parent, $child);                        //添加对应关系
                }
            }
            return $this->redirect(['index']);
        } else {
            return $this->render('create', [
                'model' => $model,
                'menuArr' => $menuArr,
            ]);
        }
    }

    /**
     *更新菜单
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);
        $menu = $model->getCreateMenuList();
        $menuArr = array('0'=>"顶级菜单");

        foreach($menu as $vo){
            $menuArr[$vo['id']] = $vo['name'];
            if(!empty($vo['_child'])){
                foreach($vo['_child'] as $v){
                    $menuArr[$v['id']] = "|--".$v['name'];
                    if(!empty($v['_child'])){
                        foreach($v['_child'] as $v3){
                            $menuArr[$v3['id']] = "|----".$v3['name'];
                        }
                    }
                }
            }
        }
        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['index']);
        } else {
            return $this->render('update', [
                'model' => $model,
                'menuArr' => $menuArr,
            ]);
        }
    }

    /**
     * 删除菜单
     */
    public function actionDelete($id)
    {
        //通过id找到router
        $MenuModel = new Menu();
        $name = $MenuModel->getRouteById($id);
        //删除菜单同时删除权限
        if(!empty($name)){
            $model = new AuthItem();
            $model->setScenario(AuthItem:: SCENARIOS_DELETE);
            $model-> name = $name;
            $model->romoveItem();
        }

        $this->findModel($id)->delete();
        return $this->redirect(['index']);
    }

    protected function findModel($id)
    {
        if (($model = Menu::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }

}
